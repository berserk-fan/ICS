/* 
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */ 
#include <stdio.h>
#include "cachelab.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/* 
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. 
 */
char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
  int i,j,r,c;
  int tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8;

  if(M == 32 && N == 32){  
    for(i = 0; i < 4; ++i) {
      for(r = 0; r < 32; r++){
	c = i*8;
	tmp1 = A[r][c];
	tmp2 = A[r][c+1];
	tmp3 = A[r][c+2];
	tmp4 = A[r][c+3];
	tmp5 = A[r][c+4];
	tmp6 = A[r][c+5];
	tmp7 = A[r][c+6];
	tmp8 = A[r][c+7];

	B[c][r] = tmp1;
	B[c+1][r] = tmp2;
	B[c+2][r] = tmp3;
	B[c+3][r] = tmp4;
	B[c+4][r] = tmp5;
	B[c+5][r] = tmp6;
	B[c+6][r] = tmp7;
	B[c+7][r] = tmp8;
      }
    } 
  }
  if(M == 64 && N == 64){
    for(j = 0; j < 64; j+=8) {
      for(i = 0; i < 64; i+=4) {
	for(r = j; r < (j+8); ++r) {
	  c = i;
	  tmp1 = A[r][c];
	  tmp2 = A[r][c+1];
	  tmp3 = A[r][c+2];
	  tmp4 = A[r][c+3];

	  B[c][r] = tmp1;
	  B[c+1][r] = tmp2;
	  B[c+2][r] = tmp3;
	  B[c+3][r] = tmp4;
	}
      }
    }
  }
}
/* 
 * You can define additional transpose functions below. We've defined
 * a simple one below to help you get started. 
 */ 

/* 
 * trans - A simple baseline transpose function, not optimized for the cache.
 */
char trans_desc[] = "Simple row-wise scan transpose";
void trans(int M, int N, int A[N][M], int B[M][N])
{
    int i, j, tmp;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }    
}
/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
    /* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc); 
    //registerTransFunction(trans_2, trans_2_desc); 
    /* Register any additional transpose functions */
    //registerTransFunction(trans, trans_desc); 

}

/* 
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
            if (A[i][j] != B[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}


