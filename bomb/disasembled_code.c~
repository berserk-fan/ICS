phase_3:
int phase_3(char * mystr) {
  long i, i2;
  int result;
  char * template;

  //i = rsp + 12;
  //i2 = rsp + 8;
  result = 0;
  if (sscanf(mystr, template, i2, i) <= 1)
    explode_bomb();
  if (i2 > 7)
    explode_bomb();
  switch (i2) {
  case 0:
    result = 0xcf;
    break;
  case 1:
    result = 0x137;
    break;
  case 2:
    result = 0x2c3;
    break;
  case 3:
    result = 0x100;
    break;
  case 4:
    result = 0x185;
    break;
  case 5:
    result = 0xc3;
    break;
  case 6:
    result = 0x2aa;
    break;
  case 7:
    result = 0x147;
    break;
  default:
    explode_bomb();
    result = 0;
  }
  //400fbe   
  if (i != result)
    explode_bomb();
  return result;
}
read_six_numbers:
//читает 6 чисел (по 4 байта) в введенной строке и последовательно записывает их на стек вызвавшей его функции
phase_2:
int phase_2(char *str) {
  read_six_numbers();
  if ( * rsp != 1)
    explode_bomb();
  int result;
  for (i = rsp + 4, j = rsp + 24, i != j, i += 4) {
    result = * (i - 4);
    result *= 2;
    if ( * i != result)
      explode_bomb();
  }
  2n d = 2 * 1 st;
}
//so idea is every number should double previous;
//so idea is every number should double previous;
phase_4:
int phase_4(char * str) {
  //allocate 18 bytes
  //rcx = rsp + 12
  //rdx = rsp + 8
  int i, i2;
  int result;
  char * template;
  smth = 0x4025cf;
  result = 0;
  if (sscanf(str, template, i, i2) != 2)
    explode_bomb();
  if (i > 0xe)
    explode_bomb();
  int result = func4(i, 0x0, 0xe);
  if (result != 0)
    explode_bomb();
  if (0x0 != i2)
    explode_bomb();
}
func4:
func4(int a,unsigned int b, unsigned int c) {
  //alloc 8 bytes
  int result, ret;
  //rcx
  unsigned int smth;
  result = (c - b) >> 31 + (c - b);
  result >>= 1; //arithmetical shift
  smth = result + b;
  //smth here equal to 7 on first call
  //so by setting a to 7 fucntion will return 0. Other stafff is not important  
  if (smth <= a) {
    result = 0;
    if (smth >= a)
      return;
    else :
      ret = func4(a, smth + 1, c);
    result = 2 * ret + 1;
  } else {
    ret = func4(a, b, smth - 1);
    result = 2 * ret;
    return;
  }
}

phase_5:
int phase_5(char *str){
   //alloc 20 bytes
  char *copy_;
  copy_str = str;
  //rax = 0x898a26dcfd5edd00
    

}
































